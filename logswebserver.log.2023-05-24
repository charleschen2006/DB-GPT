2023-05-24 15:39:12 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 15:39:12 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 15:39:12 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 15:39:12 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 15:39:12 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 15:39:12 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 15:39:12 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 15:39:14 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 15:39:14 | ERROR | stderr |   warnings.warn(
2023-05-24 15:39:14 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 15:39:14 | ERROR | stderr |   warnings.warn(
2023-05-24 15:39:14 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 15:39:14 | INFO | stdout | 
2023-05-24 15:39:14 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 15:39:22 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 15:39:39 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 15:39:39 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 15:39:39 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 15:39:42 | INFO | webserver | 你好！有什么我可以帮助你的吗？
2023-05-24 15:40:36 | INFO | webserver | add_text. ip: 127.0.0.1. len: 7
2023-05-24 15:40:36 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 15:40:36 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！有什么我可以帮助你的吗？###USER: 介绍以下拿破仑###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 15:41:24 | INFO | webserver | 拿破仑(Tornado)是一种轻量级的协程网络通信库，它提供了高效的协程通信、多路复用、队列、连接池等功能，具有优秀的性能和稳定性。

下面是一些拿破仑的主要特点：

* 高效的协程通信：拿破仑提供了高效的协程通信机制，使得开发者可以更加轻松地编写可靠、高效的应用程序。
* 多路复用：拿破仑支持多路复用，可以有效地实现同时处理多个客户端请求，从而提高了系统的性能。
* 队列：拿破仑提供了队列机制，可以有效地处理异步请求，并支持动态队列的管理。
* 连接池：拿破仑提供了连接池机制，可以有效地管理客户端连接，并支持连接池的自动扩展和收缩。
* 稳定性：拿破仑具有良好的稳定性，可以承受大量并发请求，并能够保证系统的可用性和稳定性。

总之，拿破仑是一种功能强大、性能优秀、稳定性强的协程网络通信库，它适合用于高性能、高可用性的应用程序开发。
2023-05-24 15:45:22 | INFO | webserver | add_text. ip: 127.0.0.1. len: 15
2023-05-24 15:45:22 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 15:45:22 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！有什么我可以帮助你的吗？###USER: 介绍以下拿破仑###Assistant: 拿破仑(Tornado)是一种轻量级的协程网络通信库，它提供了高效的协程通信、多路复用、队列、连接池等功能，具有优秀的性能和稳定性。\n\n下面是一些拿破仑的主要特点：\n\n* 高效的协程通信：拿破仑提供了高效的协程通信机制，使得开发者可以更加轻松地编写可靠、高效的应用程序。\n* 多路复用：拿破仑支持多路复用，可以有效地实现同时处理多个客户端请求，从而提高了系统的性能。\n* 队列：拿破仑提供了队列机制，可以有效地处理异步请求，并支持动态队列的管理。\n* 连接池：拿破仑提供了连接池机制，可以有效地管理客户端连接，并支持连接池的自动扩展和收缩。\n* 稳定性：拿破仑具有良好的稳定性，可以承受大量并发请求，并能够保证系统的可用性和稳定性。\n\n总之，拿破仑是一种功能强大、性能优秀、稳定性强的协程网络通信库，它适合用于高性能、高可用性的应用程序开发。###USER: 介绍一下中国主要的几家保险公司###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 15:46:18 | INFO | webserver | 中国保险行业是一个充满竞争的市场，以下是一些中国最大的保险公司：

1. 中国人民保险集团：中国人民保险集团是中国最大的保险公司之一，成立于2003年，总部位于北京。它提供一系列的保险产品，包括生命保险、医疗保险、养老保险等。
2. 中国人民银行保险：中国人民银行保险是中国人民银行旗下的保险公司，成立于1988年。它提供各种类型的保险产品，包括生命保险、医疗保险、财产保险、交通保险等。
3. 中保国际：中保国际是中国一家大型保险集团，成立于2002年。它提供保险服务、医疗服务、保险雇主服务等多个领域。
4. 中国工商保险：中国工商保险是中国工商银行旗下的保险公司，成立于1999年。它提供各种类型的保险产品，包括工业保险、商业保险、医疗保险等。
5. 中国平安国际：中国平安国际是中国一家大型保险集团，成立于
2023-05-24 15:47:57 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 15:47:57 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 15:47:57 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！有什么我可以帮助你的吗？###USER: 介绍以下拿破仑###Assistant: 拿破仑(Tornado)是一种轻量级的协程网络通信库，它提供了高效的协程通信、多路复用、队列、连接池等功能，具有优秀的性能和稳定性。\n\n下面是一些拿破仑的主要特点：\n\n* 高效的协程通信：拿破仑提供了高效的协程通信机制，使得开发者可以更加轻松地编写可靠、高效的应用程序。\n* 多路复用：拿破仑支持多路复用，可以有效地实现同时处理多个客户端请求，从而提高了系统的性能。\n* 队列：拿破仑提供了队列机制，可以有效地处理异步请求，并支持动态队列的管理。\n* 连接池：拿破仑提供了连接池机制，可以有效地管理客户端连接，并支持连接池的自动扩展和收缩。\n* 稳定性：拿破仑具有良好的稳定性，可以承受大量并发请求，并能够保证系统的可用性和稳定性。\n\n总之，拿破仑是一种功能强大、性能优秀、稳定性强的协程网络通信库，它适合用于高性能、高可用性的应用程序开发。###USER: 介绍一下中国主要的几家保险公司###Assistant: 中国保险行业是一个充满竞争的市场，以下是一些中国最大的保险公司：\n\n1. 中国人民保险集团：中国人民保险集团是中国最大的保险公司之一，成立于2003年，总部位于北京。它提供一系列的保险产品，包括生命保险、医疗保险、养老保险等。\n2. 中国人民银行保险：中国人民银行保险是中国人民银行旗下的保险公司，成立于1988年。它提供各种类型的保险产品，包括生命保险、医疗保险、财产保险、交通保险等。\n3. 中保国际：中保国际是中国一家大型保险集团，成立于2002年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n4. 中国工商保险：中国工商保险是中国工商银行旗下的保险公司，成立于1999年。它提供各种类型的保险产品，包括工业保险、商业保险、医疗保险等。\n5. 中国平安国际：中国平安国际是中国一家大型保险集团，成立于###USER: 继续###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 15:48:16 | INFO | webserver | 1992年。它提供保险服务、医疗服务、保险雇主服务等多个领域。

以上是一些中国最大的保险公司，每个公司都有其自身的优势和特点。保险行业是一个高度投资和监管的行业，保险公司需要保持良好的信誉和信誉，并始终注重客户需求和服务质量。
2023-05-24 16:21:21 | INFO | webserver | add_text. ip: 127.0.0.1. len: 16
2023-05-24 16:21:21 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 16:21:21 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！有什么我可以帮助你的吗？###USER: 介绍以下拿破仑###Assistant: 拿破仑(Tornado)是一种轻量级的协程网络通信库，它提供了高效的协程通信、多路复用、队列、连接池等功能，具有优秀的性能和稳定性。\n\n下面是一些拿破仑的主要特点：\n\n* 高效的协程通信：拿破仑提供了高效的协程通信机制，使得开发者可以更加轻松地编写可靠、高效的应用程序。\n* 多路复用：拿破仑支持多路复用，可以有效地实现同时处理多个客户端请求，从而提高了系统的性能。\n* 队列：拿破仑提供了队列机制，可以有效地处理异步请求，并支持动态队列的管理。\n* 连接池：拿破仑提供了连接池机制，可以有效地管理客户端连接，并支持连接池的自动扩展和收缩。\n* 稳定性：拿破仑具有良好的稳定性，可以承受大量并发请求，并能够保证系统的可用性和稳定性。\n\n总之，拿破仑是一种功能强大、性能优秀、稳定性强的协程网络通信库，它适合用于高性能、高可用性的应用程序开发。###USER: 介绍一下中国主要的几家保险公司###Assistant: 中国保险行业是一个充满竞争的市场，以下是一些中国最大的保险公司：\n\n1. 中国人民保险集团：中国人民保险集团是中国最大的保险公司之一，成立于2003年，总部位于北京。它提供一系列的保险产品，包括生命保险、医疗保险、养老保险等。\n2. 中国人民银行保险：中国人民银行保险是中国人民银行旗下的保险公司，成立于1988年。它提供各种类型的保险产品，包括生命保险、医疗保险、财产保险、交通保险等。\n3. 中保国际：中保国际是中国一家大型保险集团，成立于2002年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n4. 中国工商保险：中国工商保险是中国工商银行旗下的保险公司，成立于1999年。它提供各种类型的保险产品，包括工业保险、商业保险、医疗保险等。\n5. 中国平安国际：中国平安国际是中国一家大型保险集团，成立于###USER: 继续###Assistant: 1992年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n\n以上是一些中国最大的保险公司，每个公司都有其自身的优势和特点。保险行业是一个高度投资和监管的行业，保险公司需要保持良好的信誉和信誉，并始终注重客户需求和服务质量。###USER: 树上十只鸟拿枪打死一只还剩几只？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 16:22:15 | INFO | webserver | 这是一个比较复杂的数学问题，需要使用动态方程模型来解决。动态方程模型是一种数学模型，用于描述系统的时间演化，可以用来解决生产、消耗、浪漫等问题。

假设有10只鸟，每只鸟都拿枪，总体方程可以表示为：

dN/dt = r \* N \* (K - N)

其中，N表示当前的鸟数，r表示每只鸟每天死亡的率，K表示系统的最大可支持容量。

假设每只鸟每天死亡的率为α（小于1），则可以得到：

N(t) = N0 \* (1 - α \* t)

其中，N0表示初始鸟数，t表示时间（单位为天）。

将这两个方程相加，可以得到：

dN/dt = r \* N \* (K - N) = α \* N \* (K - N)

化简得：

N(t) = (N0/α) \* (1 - αt) \* (1 - rt) / (1 - r)

这个方程可以用来求解鸟数的时间变化情况，但需要考虑更多的因素，如鸟群体的干扰、疫情等。因此，这个问题不能简单地得出答案。
2023-05-24 16:24:25 | INFO | webserver | add_text. ip: 127.0.0.1. len: 12
2023-05-24 16:24:25 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 16:24:25 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！有什么我可以帮助你的吗？###USER: 介绍以下拿破仑###Assistant: 拿破仑(Tornado)是一种轻量级的协程网络通信库，它提供了高效的协程通信、多路复用、队列、连接池等功能，具有优秀的性能和稳定性。\n\n下面是一些拿破仑的主要特点：\n\n* 高效的协程通信：拿破仑提供了高效的协程通信机制，使得开发者可以更加轻松地编写可靠、高效的应用程序。\n* 多路复用：拿破仑支持多路复用，可以有效地实现同时处理多个客户端请求，从而提高了系统的性能。\n* 队列：拿破仑提供了队列机制，可以有效地处理异步请求，并支持动态队列的管理。\n* 连接池：拿破仑提供了连接池机制，可以有效地管理客户端连接，并支持连接池的自动扩展和收缩。\n* 稳定性：拿破仑具有良好的稳定性，可以承受大量并发请求，并能够保证系统的可用性和稳定性。\n\n总之，拿破仑是一种功能强大、性能优秀、稳定性强的协程网络通信库，它适合用于高性能、高可用性的应用程序开发。###USER: 介绍一下中国主要的几家保险公司###Assistant: 中国保险行业是一个充满竞争的市场，以下是一些中国最大的保险公司：\n\n1. 中国人民保险集团：中国人民保险集团是中国最大的保险公司之一，成立于2003年，总部位于北京。它提供一系列的保险产品，包括生命保险、医疗保险、养老保险等。\n2. 中国人民银行保险：中国人民银行保险是中国人民银行旗下的保险公司，成立于1988年。它提供各种类型的保险产品，包括生命保险、医疗保险、财产保险、交通保险等。\n3. 中保国际：中保国际是中国一家大型保险集团，成立于2002年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n4. 中国工商保险：中国工商保险是中国工商银行旗下的保险公司，成立于1999年。它提供各种类型的保险产品，包括工业保险、商业保险、医疗保险等。\n5. 中国平安国际：中国平安国际是中国一家大型保险集团，成立于###USER: 继续###Assistant: 1992年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n\n以上是一些中国最大的保险公司，每个公司都有其自身的优势和特点。保险行业是一个高度投资和监管的行业，保险公司需要保持良好的信誉和信誉，并始终注重客户需求和服务质量。###USER: 树上十只鸟拿枪打死一只还剩几只？###Assistant: 这是一个比较复杂的数学问题，需要使用动态方程模型来解决。动态方程模型是一种数学模型，用于描述系统的时间演化，可以用来解决生产、消耗、浪漫等问题。\n\n假设有10只鸟，每只鸟都拿枪，总体方程可以表示为：\n\ndN/dt = r \\* N \\* (K - N)\n\n其中，N表示当前的鸟数，r表示每只鸟每天死亡的率，K表示系统的最大可支持容量。\n\n假设每只鸟每天死亡的率为α（小于1），则可以得到：\n\nN(t) = N0 \\* (1 - α \\* t)\n\n其中，N0表示初始鸟数，t表示时间（单位为天）。\n\n将这两个方程相加，可以得到：\n\ndN/dt = r \\* N \\* (K - N) = α \\* N \\* (K - N)\n\n化简得：\n\nN(t) = (N0/α) \\* (1 - αt) \\* (1 - rt) / (1 - r)\n\n这个方程可以用来求解鸟数的时间变化情况，但需要考虑更多的因素，如鸟群体的干扰、疫情等。因此，这个问题不能简单地得出答案。###USER: 鲁迅和周树人是什么关系？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 16:24:35 | INFO | webserver | 鲁迅和周树人是同一个人。周树人是中国著名的文学家、导演和历史学者，而鲁迅则是中国的文学作品和文学理论方面的专家。
2023-05-24 16:25:00 | INFO | webserver | add_text. ip: 127.0.0.1. len: 13
2023-05-24 16:25:00 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 16:25:00 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！有什么我可以帮助你的吗？###USER: 介绍以下拿破仑###Assistant: 拿破仑(Tornado)是一种轻量级的协程网络通信库，它提供了高效的协程通信、多路复用、队列、连接池等功能，具有优秀的性能和稳定性。\n\n下面是一些拿破仑的主要特点：\n\n* 高效的协程通信：拿破仑提供了高效的协程通信机制，使得开发者可以更加轻松地编写可靠、高效的应用程序。\n* 多路复用：拿破仑支持多路复用，可以有效地实现同时处理多个客户端请求，从而提高了系统的性能。\n* 队列：拿破仑提供了队列机制，可以有效地处理异步请求，并支持动态队列的管理。\n* 连接池：拿破仑提供了连接池机制，可以有效地管理客户端连接，并支持连接池的自动扩展和收缩。\n* 稳定性：拿破仑具有良好的稳定性，可以承受大量并发请求，并能够保证系统的可用性和稳定性。\n\n总之，拿破仑是一种功能强大、性能优秀、稳定性强的协程网络通信库，它适合用于高性能、高可用性的应用程序开发。###USER: 介绍一下中国主要的几家保险公司###Assistant: 中国保险行业是一个充满竞争的市场，以下是一些中国最大的保险公司：\n\n1. 中国人民保险集团：中国人民保险集团是中国最大的保险公司之一，成立于2003年，总部位于北京。它提供一系列的保险产品，包括生命保险、医疗保险、养老保险等。\n2. 中国人民银行保险：中国人民银行保险是中国人民银行旗下的保险公司，成立于1988年。它提供各种类型的保险产品，包括生命保险、医疗保险、财产保险、交通保险等。\n3. 中保国际：中保国际是中国一家大型保险集团，成立于2002年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n4. 中国工商保险：中国工商保险是中国工商银行旗下的保险公司，成立于1999年。它提供各种类型的保险产品，包括工业保险、商业保险、医疗保险等。\n5. 中国平安国际：中国平安国际是中国一家大型保险集团，成立于###USER: 继续###Assistant: 1992年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n\n以上是一些中国最大的保险公司，每个公司都有其自身的优势和特点。保险行业是一个高度投资和监管的行业，保险公司需要保持良好的信誉和信誉，并始终注重客户需求和服务质量。###USER: 树上十只鸟拿枪打死一只还剩几只？###Assistant: 这是一个比较复杂的数学问题，需要使用动态方程模型来解决。动态方程模型是一种数学模型，用于描述系统的时间演化，可以用来解决生产、消耗、浪漫等问题。\n\n假设有10只鸟，每只鸟都拿枪，总体方程可以表示为：\n\ndN/dt = r \\* N \\* (K - N)\n\n其中，N表示当前的鸟数，r表示每只鸟每天死亡的率，K表示系统的最大可支持容量。\n\n假设每只鸟每天死亡的率为α（小于1），则可以得到：\n\nN(t) = N0 \\* (1 - α \\* t)\n\n其中，N0表示初始鸟数，t表示时间（单位为天）。\n\n将这两个方程相加，可以得到：\n\ndN/dt = r \\* N \\* (K - N) = α \\* N \\* (K - N)\n\n化简得：\n\nN(t) = (N0/α) \\* (1 - αt) \\* (1 - rt) / (1 - r)\n\n这个方程可以用来求解鸟数的时间变化情况，但需要考虑更多的因素，如鸟群体的干扰、疫情等。因此，这个问题不能简单地得出答案。###USER: 鲁迅和周树人是什么关系？###Assistant: 鲁迅和周树人是同一个人。周树人是中国著名的文学家、导演和历史学者，而鲁迅则是中国的文学作品和文学理论方面的专家。###USER: 乔峰和欧阳锋谁的功夫利害？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 16:25:02 | INFO | webserver | 乔峰和��
2023-05-24 16:25:45 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 16:25:46 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 16:25:46 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！有什么我可以帮助你的吗？###USER: 介绍以下拿破仑###Assistant: 拿破仑(Tornado)是一种轻量级的协程网络通信库，它提供了高效的协程通信、多路复用、队列、连接池等功能，具有优秀的性能和稳定性。\n\n下面是一些拿破仑的主要特点：\n\n* 高效的协程通信：拿破仑提供了高效的协程通信机制，使得开发者可以更加轻松地编写可靠、高效的应用程序。\n* 多路复用：拿破仑支持多路复用，可以有效地实现同时处理多个客户端请求，从而提高了系统的性能。\n* 队列：拿破仑提供了队列机制，可以有效地处理异步请求，并支持动态队列的管理。\n* 连接池：拿破仑提供了连接池机制，可以有效地管理客户端连接，并支持连接池的自动扩展和收缩。\n* 稳定性：拿破仑具有良好的稳定性，可以承受大量并发请求，并能够保证系统的可用性和稳定性。\n\n总之，拿破仑是一种功能强大、性能优秀、稳定性强的协程网络通信库，它适合用于高性能、高可用性的应用程序开发。###USER: 介绍一下中国主要的几家保险公司###Assistant: 中国保险行业是一个充满竞争的市场，以下是一些中国最大的保险公司：\n\n1. 中国人民保险集团：中国人民保险集团是中国最大的保险公司之一，成立于2003年，总部位于北京。它提供一系列的保险产品，包括生命保险、医疗保险、养老保险等。\n2. 中国人民银行保险：中国人民银行保险是中国人民银行旗下的保险公司，成立于1988年。它提供各种类型的保险产品，包括生命保险、医疗保险、财产保险、交通保险等。\n3. 中保国际：中保国际是中国一家大型保险集团，成立于2002年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n4. 中国工商保险：中国工商保险是中国工商银行旗下的保险公司，成立于1999年。它提供各种类型的保险产品，包括工业保险、商业保险、医疗保险等。\n5. 中国平安国际：中国平安国际是中国一家大型保险集团，成立于###USER: 继续###Assistant: 1992年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n\n以上是一些中国最大的保险公司，每个公司都有其自身的优势和特点。保险行业是一个高度投资和监管的行业，保险公司需要保持良好的信誉和信誉，并始终注重客户需求和服务质量。###USER: 树上十只鸟拿枪打死一只还剩几只？###Assistant: 这是一个比较复杂的数学问题，需要使用动态方程模型来解决。动态方程模型是一种数学模型，用于描述系统的时间演化，可以用来解决生产、消耗、浪漫等问题。\n\n假设有10只鸟，每只鸟都拿枪，总体方程可以表示为：\n\ndN/dt = r \\* N \\* (K - N)\n\n其中，N表示当前的鸟数，r表示每只鸟每天死亡的率，K表示系统的最大可支持容量。\n\n假设每只鸟每天死亡的率为α（小于1），则可以得到：\n\nN(t) = N0 \\* (1 - α \\* t)\n\n其中，N0表示初始鸟数，t表示时间（单位为天）。\n\n将这两个方程相加，可以得到：\n\ndN/dt = r \\* N \\* (K - N) = α \\* N \\* (K - N)\n\n化简得：\n\nN(t) = (N0/α) \\* (1 - αt) \\* (1 - rt) / (1 - r)\n\n这个方程可以用来求解鸟数的时间变化情况，但需要考虑更多的因素，如鸟群体的干扰、疫情等。因此，这个问题不能简单地得出答案。###USER: 鲁迅和周树人是什么关系？###Assistant: 鲁迅和周树人是同一个人。周树人是中国著名的文学家、导演和历史学者，而鲁迅则是中国的文学作品和文学理论方面的专家。###USER: 乔峰和欧阳锋谁的功夫利害？###Assistant: 乔峰和��###USER: 继续###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 16:25:48 | INFO | webserver | ��well-known as a language model.
2023-05-24 16:26:00 | INFO | webserver | add_text. ip: 127.0.0.1. len: 13
2023-05-24 16:26:00 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 16:26:00 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！有什么我可以帮助你的吗？###USER: 介绍以下拿破仑###Assistant: 拿破仑(Tornado)是一种轻量级的协程网络通信库，它提供了高效的协程通信、多路复用、队列、连接池等功能，具有优秀的性能和稳定性。\n\n下面是一些拿破仑的主要特点：\n\n* 高效的协程通信：拿破仑提供了高效的协程通信机制，使得开发者可以更加轻松地编写可靠、高效的应用程序。\n* 多路复用：拿破仑支持多路复用，可以有效地实现同时处理多个客户端请求，从而提高了系统的性能。\n* 队列：拿破仑提供了队列机制，可以有效地处理异步请求，并支持动态队列的管理。\n* 连接池：拿破仑提供了连接池机制，可以有效地管理客户端连接，并支持连接池的自动扩展和收缩。\n* 稳定性：拿破仑具有良好的稳定性，可以承受大量并发请求，并能够保证系统的可用性和稳定性。\n\n总之，拿破仑是一种功能强大、性能优秀、稳定性强的协程网络通信库，它适合用于高性能、高可用性的应用程序开发。###USER: 介绍一下中国主要的几家保险公司###Assistant: 中国保险行业是一个充满竞争的市场，以下是一些中国最大的保险公司：\n\n1. 中国人民保险集团：中国人民保险集团是中国最大的保险公司之一，成立于2003年，总部位于北京。它提供一系列的保险产品，包括生命保险、医疗保险、养老保险等。\n2. 中国人民银行保险：中国人民银行保险是中国人民银行旗下的保险公司，成立于1988年。它提供各种类型的保险产品，包括生命保险、医疗保险、财产保险、交通保险等。\n3. 中保国际：中保国际是中国一家大型保险集团，成立于2002年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n4. 中国工商保险：中国工商保险是中国工商银行旗下的保险公司，成立于1999年。它提供各种类型的保险产品，包括工业保险、商业保险、医疗保险等。\n5. 中国平安国际：中国平安国际是中国一家大型保险集团，成立于###USER: 继续###Assistant: 1992年。它提供保险服务、医疗服务、保险雇主服务等多个领域。\n\n以上是一些中国最大的保险公司，每个公司都有其自身的优势和特点。保险行业是一个高度投资和监管的行业，保险公司需要保持良好的信誉和信誉，并始终注重客户需求和服务质量。###USER: 树上十只鸟拿枪打死一只还剩几只？###Assistant: 这是一个比较复杂的数学问题，需要使用动态方程模型来解决。动态方程模型是一种数学模型，用于描述系统的时间演化，可以用来解决生产、消耗、浪漫等问题。\n\n假设有10只鸟，每只鸟都拿枪，总体方程可以表示为：\n\ndN/dt = r \\* N \\* (K - N)\n\n其中，N表示当前的鸟数，r表示每只鸟每天死亡的率，K表示系统的最大可支持容量。\n\n假设每只鸟每天死亡的率为α（小于1），则可以得到：\n\nN(t) = N0 \\* (1 - α \\* t)\n\n其中，N0表示初始鸟数，t表示时间（单位为天）。\n\n将这两个方程相加，可以得到：\n\ndN/dt = r \\* N \\* (K - N) = α \\* N \\* (K - N)\n\n化简得：\n\nN(t) = (N0/α) \\* (1 - αt) \\* (1 - rt) / (1 - r)\n\n这个方程可以用来求解鸟数的时间变化情况，但需要考虑更多的因素，如鸟群体的干扰、疫情等。因此，这个问题不能简单地得出答案。###USER: 鲁迅和周树人是什么关系？###Assistant: 鲁迅和周树人是同一个人。周树人是中国著名的文学家、导演和历史学者，而鲁迅则是中国的文学作品和文学理论方面的专家。###USER: 乔峰和欧阳锋谁的功夫利害？###Assistant: 乔峰和��###USER: 继续###Assistant: ��well-known as a language model.###USER: 乔峰和欧阳锋谁的功夫利害？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 16:26:01 | INFO | webserver | MySQL and SQL queries.
2023-05-24 16:43:41 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 16:43:41 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 16:43:41 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:43:41 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:43:41 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 898, in call_function
2023-05-24 16:43:41 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:43:41 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:43:41 | ERROR | stderr |     return await future
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:43:41 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py", line 549, in async_iteration
2023-05-24 16:43:41 | ERROR | stderr |     return next(iterator)
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 263, in http_bot
2023-05-24 16:43:41 | ERROR | stderr |     knqa = KnownLedgeBaseQA()
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/vectordb_qa.py", line 13, in __init__
2023-05-24 16:43:41 | ERROR | stderr |     k2v = KnownLedge2Vector()
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/vector_store/file_loader.py", line 39, in __init__
2023-05-24 16:43:41 | ERROR | stderr |     self.embeddings = HuggingFaceEmbeddings(model_name=self.model_name)
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/langchain/embeddings/huggingface.py", line 39, in __init__
2023-05-24 16:43:41 | ERROR | stderr |     self.client = sentence_transformers.SentenceTransformer(self.model_name)
2023-05-24 16:43:41 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/sentence_transformers/SentenceTransformer.py", line 77, in __init__
2023-05-24 16:43:41 | ERROR | stderr |     raise ValueError("Path {} not found".format(model_name_or_path))
2023-05-24 16:43:41 | ERROR | stderr | ValueError: Path /home/charles/DB-GPT/models/all-MiniLM-L6-v2 not found
2023-05-24 16:43:52 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 16:44:01 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 16:44:01 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:01 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:01 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:01 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:01 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:01 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:01 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:01 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:01 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:01 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:01 | ERROR | stderr |     return await future
2023-05-24 16:44:01 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:01 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:01 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 171, in add_text
2023-05-24 16:44:01 | ERROR | stderr |     state.append_message(state.roles[0], text)
2023-05-24 16:44:01 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'append_message'
2023-05-24 16:44:05 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:05 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:05 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:05 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:05 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:05 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:05 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:05 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:05 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:05 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:05 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:05 | ERROR | stderr |     return await future
2023-05-24 16:44:05 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:05 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:05 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:05 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:05 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:44:06 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:06 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:06 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:06 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:06 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:06 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:06 | ERROR | stderr |     return await future
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:06 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:06 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:06 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:44:06 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:06 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:06 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:06 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:06 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:06 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:06 | ERROR | stderr |     return await future
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:06 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:06 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:06 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:06 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:44:07 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 16:44:08 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:08 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:08 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:08 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:08 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:08 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:08 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:08 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:08 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:08 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:08 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:08 | ERROR | stderr |     return await future
2023-05-24 16:44:08 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:08 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:08 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:08 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:08 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:44:09 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:09 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:09 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:09 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:09 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:09 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:09 | ERROR | stderr |     return await future
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:09 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:09 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:09 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:44:09 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:09 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:09 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:09 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:09 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:09 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:09 | ERROR | stderr |     return await future
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:09 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:09 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:09 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:09 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:44:14 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:14 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:14 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:14 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:14 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:14 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:14 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:14 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:14 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:14 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:14 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:14 | ERROR | stderr |     return await future
2023-05-24 16:44:14 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:14 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:14 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:14 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:14 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:44:25 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 16:44:28 | INFO | webserver | add_text. ip: 127.0.0.1. len: 0
2023-05-24 16:44:28 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:28 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:28 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:28 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:28 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:28 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:28 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:28 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:28 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:28 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:28 | ERROR | stderr |     return await future
2023-05-24 16:44:28 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:28 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:28 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 166, in add_text
2023-05-24 16:44:28 | ERROR | stderr |     state.skip_next = True
2023-05-24 16:44:28 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'skip_next'
2023-05-24 16:44:30 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 16:44:33 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 16:44:33 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:33 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:33 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:33 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:33 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:33 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:33 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:33 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:33 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:33 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:33 | ERROR | stderr |     return await future
2023-05-24 16:44:33 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:33 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:33 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 171, in add_text
2023-05-24 16:44:33 | ERROR | stderr |     state.append_message(state.roles[0], text)
2023-05-24 16:44:33 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'append_message'
2023-05-24 16:44:44 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:44 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:44 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:44 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:44 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:44 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:44 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:44 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:44 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:44 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:44 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:44 | ERROR | stderr |     return await future
2023-05-24 16:44:44 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:44 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:44 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:44 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:44 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:44:45 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 16:44:47 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:44:47 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:44:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:44:47 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:44:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:44:47 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:44:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:44:47 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:44:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:44:47 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:44:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:44:47 | ERROR | stderr |     return await future
2023-05-24 16:44:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:44:47 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:44:47 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:44:47 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:44:47 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:47:12 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:47:12 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:47:12 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:47:12 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:47:12 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:47:12 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:47:12 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:47:12 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:47:12 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:47:12 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:47:12 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:47:12 | ERROR | stderr |     return await future
2023-05-24 16:47:12 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:47:12 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:47:12 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:47:12 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:47:12 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:47:19 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 16:47:19 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:47:19 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:47:19 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:47:19 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:47:19 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:47:19 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:47:19 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:47:19 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:47:19 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:47:19 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:47:19 | ERROR | stderr |     return await future
2023-05-24 16:47:19 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:47:19 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:47:19 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 16:47:19 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 16:47:19 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 16:47:24 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 16:47:31 | INFO | webserver | add_text. ip: 127.0.0.1. len: 5
2023-05-24 16:47:31 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 16:47:31 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 16:47:31 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 16:47:31 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 16:47:31 | ERROR | stderr |     result = await self.call_function(
2023-05-24 16:47:31 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 16:47:31 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 16:47:31 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 16:47:31 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 16:47:31 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 16:47:31 | ERROR | stderr |     return await future
2023-05-24 16:47:31 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 16:47:31 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 16:47:31 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 171, in add_text
2023-05-24 16:47:31 | ERROR | stderr |     state.append_message(state.roles[0], text)
2023-05-24 16:47:31 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'append_message'
2023-05-24 16:47:35 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 16:47:41 | INFO | webserver | add_text. ip: 127.0.0.1. len: 5
2023-05-24 16:47:41 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 16:47:41 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: hello###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 16:47:42 | INFO | webserver | Hello! How can I assist you today?
2023-05-24 16:48:14 | INFO | webserver | add_text. ip: 127.0.0.1. len: 13
2023-05-24 16:48:14 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 16:48:14 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: hello###Assistant: Hello! How can I assist you today?###USER: 乔峰和周伯通谁功夫更利害？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 16:49:08 | INFO | webserver | 乔峰和周伯通谁功夫都是武术分支，它们的功夫都有自己独特的特点和优势。以下是两个功夫的一些区别：
1. 基础训练方式：乔峰功夫的基础训练方式是“练得力，先训斥，先耐”，而周伯通谁功夫的基础训练方式是“训斥，先训斥，先耐”。
2. 打击方式：乔峰功夫注重打击的精准性和力量，打击的方式通常是往上下、左右左右的直线打击。周伯通谁功夫注重打击的弹性和飞跃度，打击的方式通常是往前后、左右左右的拐击打击。
3. 销利项目：乔峰功夫的销利项目比周伯通谁功夫更少，乔峰功夫的销利项目主要是针对掌控气功和速度等级的比赛。
4. 技术难度：周伯通谁功夫的技术难度相对乔峰功夫要高，需要对肌肉弹性、力量和控制力的循环训练有一定的了解。
总的来说，乔峰和周伯通谁功夫都是需要耐心和毅力的武术，每个功夫都有自己的特
2023-05-24 17:45:20 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 17:45:20 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 17:45:20 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: hello###Assistant: Hello! How can I assist you today?###USER: 乔峰和周伯通谁功夫更利害？###Assistant: 乔峰和周伯通谁功夫都是武术分支，它们的功夫都有自己独特的特点和优势。以下是两个功夫的一些区别：\n1. 基础训练方式：乔峰功夫的基础训练方式是“练得力，先训斥，先耐”，而周伯通谁功夫的基础训练方式是“训斥，先训斥，先耐”。\n2. 打击方式：乔峰功夫注重打击的精准性和力量，打击的方式通常是往上下、左右左右的直线打击。周伯通谁功夫注重打击的弹性和飞跃度，打击的方式通常是往前后、左右左右的拐击打击。\n3. 销利项目：乔峰功夫的销利项目比周伯通谁功夫更少，乔峰功夫的销利项目主要是针对掌控气功和速度等级的比赛。\n4. 技术难度：周伯通谁功夫的技术难度相对乔峰功夫要高，需要对肌肉弹性、力量和控制力的循环训练有一定的了解。\n总的来说，乔峰和周伯通谁功夫都是需要耐心和毅力的武术，每个功夫都有自己的特###USER: 继续###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 17:45:36 | INFO | webserver | 在很多方面，乔峰和周伯通谁功夫都是需要耐心和毅力的武术，每个功夫都有自己独特的特点和优势。最终，选择哪个功夫作为自己的主要武术是个个人的决定，需要根据自己的兴趣、身体状况、风格等多方面考虑。
2023-05-24 17:46:20 | INFO | webserver | add_text. ip: 127.0.0.1. len: 5
2023-05-24 17:46:20 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 17:46:20 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: hello###Assistant: Hello! How can I assist you today?###USER: 乔峰和周伯通谁功夫更利害？###Assistant: 乔峰和周伯通谁功夫都是武术分支，它们的功夫都有自己独特的特点和优势。以下是两个功夫的一些区别：\n1. 基础训练方式：乔峰功夫的基础训练方式是“练得力，先训斥，先耐”，而周伯通谁功夫的基础训练方式是“训斥，先训斥，先耐”。\n2. 打击方式：乔峰功夫注重打击的精准性和力量，打击的方式通常是往上下、左右左右的直线打击。周伯通谁功夫注重打击的弹性和飞跃度，打击的方式通常是往前后、左右左右的拐击打击。\n3. 销利项目：乔峰功夫的销利项目比周伯通谁功夫更少，乔峰功夫的销利项目主要是针对掌控气功和速度等级的比赛。\n4. 技术难度：周伯通谁功夫的技术难度相对乔峰功夫要高，需要对肌肉弹性、力量和控制力的循环训练有一定的了解。\n总的来说，乔峰和周伯通谁功夫都是需要耐心和毅力的武术，每个功夫都有自己的特###USER: 继续###Assistant: 在很多方面，乔峰和周伯通谁功夫都是需要耐心和毅力的武术，每个功夫都有自己独特的特点和优势。最终，选择哪个功夫作为自己的主要武术是个个人的决定，需要根据自己的兴趣、身体状况、风格等多方面考虑。###USER: 你叫什么？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 17:46:31 | INFO | webserver | 我是一个AI语言模型，没有实际的身份和名字。我被训练来回答您的问题，帮助您获得信息和知识。如果您有任何其他问题，请随时告诉我，我将尽力回答。
2023-05-24 17:46:38 | INFO | webserver | add_text. ip: 127.0.0.1. len: 11
2023-05-24 17:46:38 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 17:46:38 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: hello###Assistant: Hello! How can I assist you today?###USER: 乔峰和周伯通谁功夫更利害？###Assistant: 乔峰和周伯通谁功夫都是武术分支，它们的功夫都有自己独特的特点和优势。以下是两个功夫的一些区别：\n1. 基础训练方式：乔峰功夫的基础训练方式是“练得力，先训斥，先耐”，而周伯通谁功夫的基础训练方式是“训斥，先训斥，先耐”。\n2. 打击方式：乔峰功夫注重打击的精准性和力量，打击的方式通常是往上下、左右左右的直线打击。周伯通谁功夫注重打击的弹性和飞跃度，打击的方式通常是往前后、左右左右的拐击打击。\n3. 销利项目：乔峰功夫的销利项目比周伯通谁功夫更少，乔峰功夫的销利项目主要是针对掌控气功和速度等级的比赛。\n4. 技术难度：周伯通谁功夫的技术难度相对乔峰功夫要高，需要对肌肉弹性、力量和控制力的循环训练有一定的了解。\n总的来说，乔峰和周伯通谁功夫都是需要耐心和毅力的武术，每个功夫都有自己的特###USER: 继续###Assistant: 在很多方面，乔峰和周伯通谁功夫都是需要耐心和毅力的武术，每个功夫都有自己独特的特点和优势。最终，选择哪个功夫作为自己的主要武术是个个人的决定，需要根据自己的兴趣、身体状况、风格等多方面考虑。###USER: 你叫什么？###Assistant: 我是一个AI语言模型，没有实际的身份和名字。我被训练来回答您的问题，帮助您获得信息和知识。如果您有任何其他问题，请随时告诉我，我将尽力回答。###USER: 你是chatGPT吗？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 17:46:50 | INFO | webserver | 是的，我是chatGPT，以前也被称为训练有素质的AI语言模型。我被设计用于回答各种问题，包括语言、知识、娱乐等多个领域。如果您有任何问题，请随时告诉我，我将尽力回答。
2023-05-24 18:38:37 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 18:38:49 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 18:38:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1735, in block_thread
2023-05-24 18:38:49 | ERROR | stderr |     time.sleep(0.1)
2023-05-24 18:38:49 | ERROR | stderr | KeyboardInterrupt
2023-05-24 18:38:49 | ERROR | stderr | 
2023-05-24 18:38:49 | ERROR | stderr | During handling of the above exception, another exception occurred:
2023-05-24 18:38:49 | ERROR | stderr | 
2023-05-24 18:38:49 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 18:38:49 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 671, in <module>
2023-05-24 18:38:49 | ERROR | stderr |     demo.queue(
2023-05-24 18:38:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1652, in launch
2023-05-24 18:38:49 | ERROR | stderr |     self.block_thread()
2023-05-24 18:38:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1738, in block_thread
2023-05-24 18:38:49 | ERROR | stderr |     self.server.close()
2023-05-24 18:38:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/networking.py", line 43, in close
2023-05-24 18:38:49 | ERROR | stderr |     self.thread.join()
2023-05-24 18:38:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/threading.py", line 1096, in join
2023-05-24 18:38:49 | ERROR | stderr |     self._wait_for_tstate_lock()
2023-05-24 18:38:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/threading.py", line 1116, in _wait_for_tstate_lock
2023-05-24 18:38:49 | ERROR | stderr |     if lock.acquire(block, timeout):
2023-05-24 18:38:49 | ERROR | stderr | KeyboardInterrupt
2023-05-24 18:38:57 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:38:57 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 18:38:57 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 18:38:57 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 18:38:57 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 18:38:57 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 18:38:57 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:38:58 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 18:38:58 | ERROR | stderr |   warnings.warn(
2023-05-24 18:38:58 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 18:38:58 | ERROR | stderr |   warnings.warn(
2023-05-24 18:38:58 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 18:38:58 | INFO | stdout | 
2023-05-24 18:38:58 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 18:38:59 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 18:41:44 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 18:42:12 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 18:42:19 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:42:19 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 18:42:19 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 18:42:19 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 18:42:19 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 18:42:19 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 18:42:19 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:42:21 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 18:42:21 | ERROR | stderr |   warnings.warn(
2023-05-24 18:42:21 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 18:42:21 | ERROR | stderr |   warnings.warn(
2023-05-24 18:42:21 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 18:42:21 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 670, in <module>
2023-05-24 18:42:21 | ERROR | stderr |     demo = build_webdemo()
2023-05-24 18:42:21 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 591, in build_webdemo
2023-05-24 18:42:21 | ERROR | stderr |     ) = build_single_model_ui()
2023-05-24 18:42:21 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 542, in build_single_model_ui
2023-05-24 18:42:21 | ERROR | stderr |     [state, mode, sql_mode, db_selector, temperature, max_output_tokens],
2023-05-24 18:42:21 | ERROR | stderr | NameError: name 'sql_mode' is not defined
2023-05-24 18:49:12 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:49:12 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 18:49:12 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 18:49:12 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 18:49:12 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 18:49:12 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 18:49:12 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:49:14 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 18:49:14 | ERROR | stderr |   warnings.warn(
2023-05-24 18:49:14 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 18:49:14 | ERROR | stderr |   warnings.warn(
2023-05-24 18:49:14 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 18:49:14 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 670, in <module>
2023-05-24 18:49:14 | ERROR | stderr |     demo = build_webdemo()
2023-05-24 18:49:14 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 591, in build_webdemo
2023-05-24 18:49:14 | ERROR | stderr |     ) = build_single_model_ui()
2023-05-24 18:49:14 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 542, in build_single_model_ui
2023-05-24 18:49:14 | ERROR | stderr |     [state, mode, sql_mode, db_selector, temperature, max_output_tokens],
2023-05-24 18:49:14 | ERROR | stderr | NameError: name 'db_selector' is not defined
2023-05-24 18:50:21 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:50:21 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 18:50:21 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 18:50:21 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 18:50:21 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 18:50:21 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 18:50:21 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:50:23 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 18:50:23 | ERROR | stderr |   warnings.warn(
2023-05-24 18:50:23 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 18:50:23 | ERROR | stderr |   warnings.warn(
2023-05-24 18:50:23 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 18:50:23 | INFO | stdout | 
2023-05-24 18:50:23 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 18:50:32 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 18:52:43 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 18:52:48 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:52:48 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 18:52:48 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 18:52:48 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 18:52:48 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 18:52:48 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 18:52:48 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 18:52:50 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 18:52:50 | ERROR | stderr |   warnings.warn(
2023-05-24 18:52:50 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 18:52:50 | ERROR | stderr |   warnings.warn(
2023-05-24 18:52:50 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 18:52:50 | INFO | stdout | 
2023-05-24 18:52:50 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 18:52:57 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 18:53:59 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 18:53:59 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 18:53:59 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 18:54:06 | INFO | webserver | 你好！很高兴见到你。我是一个语言模型，可以回答你关于许多主题的问题。有什么可以帮到你的吗？
2023-05-24 18:54:22 | INFO | webserver | add_text. ip: 127.0.0.1. len: 6
2023-05-24 18:54:22 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 18:54:22 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！很高兴见到你。我是一个语言模型，可以回答你关于许多主题的问题。有什么可以帮到你的吗？###USER: 介绍一下西湖###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 18:54:52 | INFO | webserver | 西湖是中国湖南省昆山市Location>岳庙区的一个著名景点，被誉为“山海之灵”，是中国重要的文化与历史遗产之一。

西湖的气势优美，湖水清澈，周围山峦丰富，是中国著名的旅游胜地。它有许多著名景点，包括三潭映月、雷峰塔、断桥、钟楼等等。其中，三潭映月是西湖最著名的景点之一，每次都吸引着大量游客前来观光。

西湖还有许多神秘历史，如“凤凰岛”的传说，以及它是一个古老的文化中心。西湖的气势优美，风景秀美，是一个不可错过的旅游胜地。
2023-05-24 18:55:10 | INFO | webserver | add_text. ip: 127.0.0.1. len: 11
2023-05-24 18:55:10 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 18:55:10 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！很高兴见到你。我是一个语言模型，可以回答你关于许多主题的问题。有什么可以帮到你的吗？###USER: 介绍一下西湖###Assistant: 西湖是中国湖南省昆山市Location>岳庙区的一个著名景点，被誉为“山海之灵”，是中国重要的文化与历史遗产之一。\n\n西湖的气势优美，湖水清澈，周围山峦丰富，是中国著名的旅游胜地。它有许多著名景点，包括三潭映月、雷峰塔、断桥、钟楼等等。其中，三潭映月是西湖最著名的景点之一，每次都吸引着大量游客前来观光。\n\n西湖还有许多神秘历史，如“凤凰岛”的传说，以及它是一个古老的文化中心。西湖的气势优美，风景秀美，是一个不可错过的旅游胜地。###USER: 西湖是在杭州，你搞错了###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 18:55:26 | INFO | webserver | 非常抱歉，我的回答有误。西湖是位于中国浙江省杭州市西湖区的一个著名景点，是中国文化与历史遗产之一。杭州西湖是中国最著名的苑园之一，湖水清澈，周围风景秀美，是一个非常受欢迎的旅游胜地。感谢您指出我的错误。
2023-05-24 18:57:34 | INFO | webserver | add_text. ip: 127.0.0.1. len: 12
2023-05-24 18:57:34 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 18:57:34 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！很高兴见到你。我是一个语言模型，可以回答你关于许多主题的问题。有什么可以帮到你的吗？###USER: 介绍一下西湖###Assistant: 西湖是中国湖南省昆山市Location>岳庙区的一个著名景点，被誉为“山海之灵”，是中国重要的文化与历史遗产之一。\n\n西湖的气势优美，湖水清澈，周围山峦丰富，是中国著名的旅游胜地。它有许多著名景点，包括三潭映月、雷峰塔、断桥、钟楼等等。其中，三潭映月是西湖最著名的景点之一，每次都吸引着大量游客前来观光。\n\n西湖还有许多神秘历史，如“凤凰岛”的传说，以及它是一个古老的文化中心。西湖的气势优美，风景秀美，是一个不可错过的旅游胜地。###USER: 西湖是在杭州，你搞错了###Assistant: 非常抱歉，我的回答有误。西湖是位于中国浙江省杭州市西湖区的一个著名景点，是中国文化与历史遗产之一。杭州西湖是中国最著名的苑园之一，湖水清澈，周围风景秀美，是一个非常受欢迎的旅游胜地。感谢您指出我的错误。###USER: 讲一个许仙和白娘子的故事###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 18:58:25 | INFO | webserver | 许仙和白娘子是中国古代一个经典的爱情故事。

根据传说，许仙是一个天才学者，拥有超凡的智慧和努力。他在江南地区的一处小镇里生活，被广谱为江南七功夫中的第一位。据说，他的母亲是仙女，父亲是人类，因此他也有着仙人的特殊能力。

有一天，许仙在游玩时走到了一片岁月古树下，看到了一位美丽的白娘子。白娘子的名字叫做宋嫂，她是一位天才，也是江南七功夫中的第二位。她非常漂亮，却非常孤独，没有人朋友。

许仙受精嫂的美丽，便向她表达了对她的好感。但她却冷淡于对他，因为她认为许仙太过于虚弱，缺乏力量。

许仙决定要证明自己对爱情的真情，于是他开始了一场漫长的考验。他决定在江南七功夫中赢得第一名，从而证明自己对爱情的真情。

在一个年里的苦旅中，许仙不断地练习自己的功夫，并且通过练习冥
2023-05-24 18:58:32 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 18:58:32 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 18:58:32 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好！很高兴见到你。我是一个语言模型，可以回答你关于许多主题的问题。有什么可以帮到你的吗？###USER: 介绍一下西湖###Assistant: 西湖是中国湖南省昆山市Location>岳庙区的一个著名景点，被誉为“山海之灵”，是中国重要的文化与历史遗产之一。\n\n西湖的气势优美，湖水清澈，周围山峦丰富，是中国著名的旅游胜地。它有许多著名景点，包括三潭映月、雷峰塔、断桥、钟楼等等。其中，三潭映月是西湖最著名的景点之一，每次都吸引着大量游客前来观光。\n\n西湖还有许多神秘历史，如“凤凰岛”的传说，以及它是一个古老的文化中心。西湖的气势优美，风景秀美，是一个不可错过的旅游胜地。###USER: 西湖是在杭州，你搞错了###Assistant: 非常抱歉，我的回答有误。西湖是位于中国浙江省杭州市西湖区的一个著名景点，是中国文化与历史遗产之一。杭州西湖是中国最著名的苑园之一，湖水清澈，周围风景秀美，是一个非常受欢迎的旅游胜地。感谢您指出我的错误。###USER: 讲一个许仙和白娘子的故事###Assistant: 许仙和白娘子是中国古代一个经典的爱情故事。\n\n根据传说，许仙是一个天才学者，拥有超凡的智慧和努力。他在江南地区的一处小镇里生活，被广谱为江南七功夫中的第一位。据说，他的母亲是仙女，父亲是人类，因此他也有着仙人的特殊能力。\n\n有一天，许仙在游玩时走到了一片岁月古树下，看到了一位美丽的白娘子。白娘子的名字叫做宋嫂，她是一位天才，也是江南七功夫中的第二位。她非常漂亮，却非常孤独，没有人朋友。\n\n许仙受精嫂的美丽，便向她表达了对她的好感。但她却冷淡于对他，因为她认为许仙太过于虚弱，缺乏力量。\n\n许仙决定要证明自己对爱情的真情，于是他开始了一场漫长的考验。他决定在江南七功夫中赢得第一名，从而证明自己对爱情的真情。\n\n在一个年里的苦旅中，许仙不断地练习自己的功夫，并且通过练习冥###USER: 继续###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 18:59:16 | INFO | webserver | 续经过一段时间的苦练，许仙终于在江南七功夫中赢得了第一名，成为了江南七功夫中的第一位。

当许仙回到家里时，他发现父母不在家，只有他的母亲在里面。他向他母亲描述了自己的经历，并向她求教如何赢得爱情。

仙母听了许仙的故事，很高兴见到他的成就。她告诉许仙，要赢得�ogyue的心，必须要拥有一种特殊的力量。只有通过长期的练习和考验，才能获得这种力量。

许仙听了他母亲的话，感到非常欣慰。他意识到，爱情并不是一件容易的事情，而是需要长期的积累和考验。

最终，许仙决定要继续修炼自己的功夫，并且努力赢得爱情。他的故事也成为了一个经典的爱情故事，向世人倡导爱情的真实和力量。
2023-05-24 19:23:42 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 19:23:49 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:23:49 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 19:23:49 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 19:23:49 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 19:23:49 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 19:23:49 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 19:23:49 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:23:50 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 19:23:50 | ERROR | stderr |   warnings.warn(
2023-05-24 19:23:50 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 19:23:50 | ERROR | stderr |   warnings.warn(
2023-05-24 19:23:50 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 19:23:50 | INFO | stdout | 
2023-05-24 19:23:50 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 19:24:07 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 19:24:54 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 19:24:59 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:24:59 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 19:24:59 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 19:24:59 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 19:24:59 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 19:24:59 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 19:24:59 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:24:59 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 19:24:59 | ERROR | stderr |   warnings.warn(
2023-05-24 19:24:59 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 19:24:59 | ERROR | stderr |   warnings.warn(
2023-05-24 19:24:59 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 19:24:59 | INFO | stdout | 
2023-05-24 19:24:59 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 19:25:16 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 19:26:46 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 19:27:32 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:27:32 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 19:27:32 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 19:27:32 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 19:27:32 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 19:27:32 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 19:27:32 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:27:32 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 19:27:32 | ERROR | stderr |   warnings.warn(
2023-05-24 19:27:32 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 19:27:32 | ERROR | stderr |   warnings.warn(
2023-05-24 19:27:32 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:951: UserWarning: Expected 6 arguments for function <function http_bot at 0x7f089831a440>, received 4.
2023-05-24 19:27:32 | ERROR | stderr |   warnings.warn(
2023-05-24 19:27:32 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:955: UserWarning: Expected at least 6 arguments for function <function http_bot at 0x7f089831a440>, received 4.
2023-05-24 19:27:32 | ERROR | stderr |   warnings.warn(
2023-05-24 19:27:32 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 19:27:32 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 670, in <module>
2023-05-24 19:27:32 | ERROR | stderr |     demo = build_webdemo()
2023-05-24 19:27:32 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 591, in build_webdemo
2023-05-24 19:27:32 | ERROR | stderr |     ) = build_single_model_ui()
2023-05-24 19:27:32 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 551, in build_single_model_ui
2023-05-24 19:27:32 | ERROR | stderr |     [state, mode, sql_mode, db_selector, temperature, max_output_tokens],
2023-05-24 19:27:32 | ERROR | stderr | NameError: name 'sql_mode' is not defined
2023-05-24 19:28:17 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:28:17 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 19:28:17 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 19:28:17 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 19:28:17 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 19:28:17 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 19:28:17 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:28:18 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 19:28:18 | ERROR | stderr |   warnings.warn(
2023-05-24 19:28:18 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 19:28:18 | ERROR | stderr |   warnings.warn(
2023-05-24 19:28:18 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:951: UserWarning: Expected 6 arguments for function <function http_bot at 0x7fa69bee2440>, received 4.
2023-05-24 19:28:18 | ERROR | stderr |   warnings.warn(
2023-05-24 19:28:18 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:955: UserWarning: Expected at least 6 arguments for function <function http_bot at 0x7fa69bee2440>, received 4.
2023-05-24 19:28:18 | ERROR | stderr |   warnings.warn(
2023-05-24 19:28:18 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:951: UserWarning: Expected 6 arguments for function <function http_bot at 0x7fa69bee2440>, received 3.
2023-05-24 19:28:18 | ERROR | stderr |   warnings.warn(
2023-05-24 19:28:18 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:955: UserWarning: Expected at least 6 arguments for function <function http_bot at 0x7fa69bee2440>, received 3.
2023-05-24 19:28:18 | ERROR | stderr |   warnings.warn(
2023-05-24 19:28:18 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 19:28:18 | INFO | stdout | 
2023-05-24 19:28:18 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 19:28:23 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 19:29:17 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 19:29:17 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/helpers.py:637: UserWarning: Unexpected argument. Filling with None.
2023-05-24 19:29:17 | ERROR | stderr |   warnings.warn("Unexpected argument. Filling with None.")
2023-05-24 19:29:17 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 19:29:17 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 616, in connect
2023-05-24 19:29:17 | ERROR | stderr |     sock = socket.create_connection(
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/socket.py", line 845, in create_connection
2023-05-24 19:29:17 | ERROR | stderr |     raise err
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/socket.py", line 833, in create_connection
2023-05-24 19:29:17 | ERROR | stderr |     sock.connect(sa)
2023-05-24 19:29:17 | ERROR | stderr | ConnectionRefusedError: [Errno 111] Connection refused
2023-05-24 19:29:17 | ERROR | stderr | 
2023-05-24 19:29:17 | ERROR | stderr | During handling of the above exception, another exception occurred:
2023-05-24 19:29:17 | ERROR | stderr | 
2023-05-24 19:29:17 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 19:29:17 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 19:29:17 | ERROR | stderr |     result = await self.call_function(
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 898, in call_function
2023-05-24 19:29:17 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 19:29:17 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 19:29:17 | ERROR | stderr |     return await future
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 19:29:17 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py", line 549, in async_iteration
2023-05-24 19:29:17 | ERROR | stderr |     return next(iterator)
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 229, in http_bot
2023-05-24 19:29:17 | ERROR | stderr |     new_state.append_message(new_state.roles[0], gen_sqlgen_conversation(dbname) + query)
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 95, in gen_sqlgen_conversation
2023-05-24 19:29:17 | ERROR | stderr |     mo = MySQLOperator(
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/connections/mysql.py", line 16, in __init__
2023-05-24 19:29:17 | ERROR | stderr |     self.conn = pymysql.connect(
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 352, in __init__
2023-05-24 19:29:17 | ERROR | stderr |     self.connect()
2023-05-24 19:29:17 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 668, in connect
2023-05-24 19:29:17 | ERROR | stderr |     raise exc
2023-05-24 19:29:17 | ERROR | stderr | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on '127.0.0.1' ([Errno 111] Connection refused)")
2023-05-24 19:29:28 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 19:29:32 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 19:29:32 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 19:29:32 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 616, in connect
2023-05-24 19:29:32 | ERROR | stderr |     sock = socket.create_connection(
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/socket.py", line 845, in create_connection
2023-05-24 19:29:32 | ERROR | stderr |     raise err
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/socket.py", line 833, in create_connection
2023-05-24 19:29:32 | ERROR | stderr |     sock.connect(sa)
2023-05-24 19:29:32 | ERROR | stderr | ConnectionRefusedError: [Errno 111] Connection refused
2023-05-24 19:29:32 | ERROR | stderr | 
2023-05-24 19:29:32 | ERROR | stderr | During handling of the above exception, another exception occurred:
2023-05-24 19:29:32 | ERROR | stderr | 
2023-05-24 19:29:32 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 19:29:32 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 19:29:32 | ERROR | stderr |     result = await self.call_function(
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 898, in call_function
2023-05-24 19:29:32 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 19:29:32 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 19:29:32 | ERROR | stderr |     return await future
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 19:29:32 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py", line 549, in async_iteration
2023-05-24 19:29:32 | ERROR | stderr |     return next(iterator)
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 229, in http_bot
2023-05-24 19:29:32 | ERROR | stderr |     new_state.append_message(new_state.roles[0], gen_sqlgen_conversation(dbname) + query)
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 95, in gen_sqlgen_conversation
2023-05-24 19:29:32 | ERROR | stderr |     mo = MySQLOperator(
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/connections/mysql.py", line 16, in __init__
2023-05-24 19:29:32 | ERROR | stderr |     self.conn = pymysql.connect(
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 352, in __init__
2023-05-24 19:29:32 | ERROR | stderr |     self.connect()
2023-05-24 19:29:32 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 668, in connect
2023-05-24 19:29:32 | ERROR | stderr |     raise exc
2023-05-24 19:29:32 | ERROR | stderr | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on '127.0.0.1' ([Errno 111] Connection refused)")
2023-05-24 19:34:56 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 19:35:01 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:35:01 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 19:35:01 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 19:35:01 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 19:35:01 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 19:35:01 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 19:35:01 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:35:02 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 19:35:02 | ERROR | stderr |   warnings.warn(
2023-05-24 19:35:02 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 19:35:02 | ERROR | stderr |   warnings.warn(
2023-05-24 19:35:02 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:951: UserWarning: Expected 6 arguments for function <function http_bot at 0x7f65cd026440>, received 4.
2023-05-24 19:35:02 | ERROR | stderr |   warnings.warn(
2023-05-24 19:35:02 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:955: UserWarning: Expected at least 6 arguments for function <function http_bot at 0x7f65cd026440>, received 4.
2023-05-24 19:35:02 | ERROR | stderr |   warnings.warn(
2023-05-24 19:35:02 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 19:35:02 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 670, in <module>
2023-05-24 19:35:02 | ERROR | stderr |     demo = build_webdemo()
2023-05-24 19:35:02 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 591, in build_webdemo
2023-05-24 19:35:02 | ERROR | stderr |     ) = build_single_model_ui()
2023-05-24 19:35:02 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 551, in build_single_model_ui
2023-05-24 19:35:02 | ERROR | stderr |     [state, sql_mode, db_selector, temperature, max_output_tokens],
2023-05-24 19:35:02 | ERROR | stderr | NameError: name 'sql_mode' is not defined
2023-05-24 19:36:18 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:36:18 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 19:36:18 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 19:36:18 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 19:36:18 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 19:36:18 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 19:36:18 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 19:36:19 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 19:36:19 | ERROR | stderr |   warnings.warn(
2023-05-24 19:36:19 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 19:36:19 | ERROR | stderr |   warnings.warn(
2023-05-24 19:36:19 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:951: UserWarning: Expected 6 arguments for function <function http_bot at 0x7ff2d4222440>, received 4.
2023-05-24 19:36:19 | ERROR | stderr |   warnings.warn(
2023-05-24 19:36:19 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:955: UserWarning: Expected at least 6 arguments for function <function http_bot at 0x7ff2d4222440>, received 4.
2023-05-24 19:36:19 | ERROR | stderr |   warnings.warn(
2023-05-24 19:36:19 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:951: UserWarning: Expected 6 arguments for function <function http_bot at 0x7ff2d4222440>, received 5.
2023-05-24 19:36:19 | ERROR | stderr |   warnings.warn(
2023-05-24 19:36:19 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py:955: UserWarning: Expected at least 6 arguments for function <function http_bot at 0x7ff2d4222440>, received 5.
2023-05-24 19:36:19 | ERROR | stderr |   warnings.warn(
2023-05-24 19:36:19 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 19:36:19 | INFO | stdout | 
2023-05-24 19:36:19 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 19:36:25 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 19:36:49 | INFO | webserver | add_text. ip: 127.0.0.1. len: 4
2023-05-24 19:36:49 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/helpers.py:637: UserWarning: Unexpected argument. Filling with None.
2023-05-24 19:36:49 | ERROR | stderr |   warnings.warn("Unexpected argument. Filling with None.")
2023-05-24 19:36:49 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 19:36:49 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 616, in connect
2023-05-24 19:36:49 | ERROR | stderr |     sock = socket.create_connection(
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/socket.py", line 845, in create_connection
2023-05-24 19:36:49 | ERROR | stderr |     raise err
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/socket.py", line 833, in create_connection
2023-05-24 19:36:49 | ERROR | stderr |     sock.connect(sa)
2023-05-24 19:36:49 | ERROR | stderr | ConnectionRefusedError: [Errno 111] Connection refused
2023-05-24 19:36:49 | ERROR | stderr | 
2023-05-24 19:36:49 | ERROR | stderr | During handling of the above exception, another exception occurred:
2023-05-24 19:36:49 | ERROR | stderr | 
2023-05-24 19:36:49 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 19:36:49 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 19:36:49 | ERROR | stderr |     result = await self.call_function(
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 898, in call_function
2023-05-24 19:36:49 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 19:36:49 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 19:36:49 | ERROR | stderr |     return await future
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 19:36:49 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py", line 549, in async_iteration
2023-05-24 19:36:49 | ERROR | stderr |     return next(iterator)
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 229, in http_bot
2023-05-24 19:36:49 | ERROR | stderr |     new_state.append_message(new_state.roles[0], gen_sqlgen_conversation(dbname) + query)
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 95, in gen_sqlgen_conversation
2023-05-24 19:36:49 | ERROR | stderr |     mo = MySQLOperator(
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/connections/mysql.py", line 16, in __init__
2023-05-24 19:36:49 | ERROR | stderr |     self.conn = pymysql.connect(
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 352, in __init__
2023-05-24 19:36:49 | ERROR | stderr |     self.connect()
2023-05-24 19:36:49 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/pymysql/connections.py", line 668, in connect
2023-05-24 19:36:49 | ERROR | stderr |     raise exc
2023-05-24 19:36:49 | ERROR | stderr | pymysql.err.OperationalError: (2003, "Can't connect to MySQL server on '127.0.0.1' ([Errno 111] Connection refused)")
2023-05-24 19:37:12 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 20:19:05 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:19:05 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 20:19:05 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 20:19:05 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 20:19:05 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 20:19:05 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 20:19:05 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:19:06 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 20:19:06 | ERROR | stderr |   warnings.warn(
2023-05-24 20:19:06 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 20:19:06 | ERROR | stderr |   warnings.warn(
2023-05-24 20:19:07 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 20:19:07 | INFO | stdout | 
2023-05-24 20:19:07 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 20:19:15 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:19:32 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-24 20:19:32 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:19:32 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant:", 'temperature': 0.7, 'max_new_tokens': 512, 'stop': '###'}
2023-05-24 20:19:34 | INFO | webserver | 你好！有什么我能帮你解答的问题吗？
2023-05-24 20:35:10 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:35:13 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:35:18 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 20:35:24 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:35:24 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 20:35:24 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 20:35:24 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 20:35:24 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 20:35:24 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 20:35:24 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:35:25 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 20:35:25 | ERROR | stderr |   warnings.warn(
2023-05-24 20:35:25 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 20:35:25 | ERROR | stderr |   warnings.warn(
2023-05-24 20:35:25 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 20:35:25 | INFO | stdout | 
2023-05-24 20:35:25 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 20:35:26 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:37:05 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 20:37:11 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:37:11 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 20:37:11 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 20:37:11 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 20:37:11 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 20:37:11 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 20:37:11 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:37:12 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 20:37:12 | ERROR | stderr |   warnings.warn(
2023-05-24 20:37:12 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 20:37:12 | ERROR | stderr |   warnings.warn(
2023-05-24 20:37:12 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 20:37:12 | INFO | stdout | 
2023-05-24 20:37:12 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 20:37:17 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:38:19 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 20:38:26 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:38:26 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 20:38:26 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 20:38:26 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 20:38:26 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 20:38:26 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 20:38:26 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:38:28 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 20:38:28 | ERROR | stderr |   warnings.warn(
2023-05-24 20:38:28 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 20:38:28 | ERROR | stderr |   warnings.warn(
2023-05-24 20:38:28 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 20:38:28 | INFO | stdout | 
2023-05-24 20:38:28 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 20:38:32 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:42:16 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 20:42:22 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:42:22 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 20:42:22 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 20:42:22 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 20:42:22 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 20:42:22 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 20:42:22 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:42:24 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 20:42:24 | ERROR | stderr |   warnings.warn(
2023-05-24 20:42:24 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 20:42:24 | ERROR | stderr |   warnings.warn(
2023-05-24 20:42:25 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 20:42:25 | INFO | stdout | 
2023-05-24 20:42:25 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 20:42:26 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:43:20 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 20:43:24 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:43:24 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 20:43:24 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 20:43:24 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 20:43:24 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 20:43:24 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 20:43:24 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:43:25 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 20:43:25 | ERROR | stderr |   warnings.warn(
2023-05-24 20:43:25 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 20:43:25 | ERROR | stderr |   warnings.warn(
2023-05-24 20:43:25 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 20:43:25 | INFO | stdout | 
2023-05-24 20:43:25 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 20:43:26 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:46:09 | INFO | webserver | add_text. ip: 127.0.0.1. len: 11
2023-05-24 20:46:09 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:46:09 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 武松和宋江是什么关系？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 20:46:35 | INFO | webserver | 武松和宋江是中国古代的两位政治家，他们都曾在中国的历史上扮演过重要角色。武松是唐朝时期的政治家，他曾先后担任过各种官职，包括军部部长、工部部长和卿等。在他的帮助下，唐朝在内外政治稳定，经济兴旺，文化繁荣。而宋江则是元朝时期的政治家，他曾先后担任过各种官职，包括卿、中台和卿等。他是元朝建立的，在他的支持下元朝在内外政治稳定，经济兴旺，文化繁荣。
两人在政治上都有很大的贡献，他们都是中国历史上的重要人物。
2023-05-24 20:48:29 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-24 20:48:34 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:48:34 | INFO | stdout | /home/charles/DB-GPT
2023-05-24 20:48:34 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-24 20:48:34 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-24 20:48:34 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-24 20:48:34 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-24 20:48:34 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-24 20:48:35 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-24 20:48:35 | ERROR | stderr |   warnings.warn(
2023-05-24 20:48:35 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-24 20:48:35 | ERROR | stderr |   warnings.warn(
2023-05-24 20:48:35 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-24 20:48:35 | INFO | stdout | 
2023-05-24 20:48:35 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-24 20:48:38 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:48:56 | INFO | webserver | add_text. ip: 127.0.0.1. len: 11
2023-05-24 20:48:56 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:48:56 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 武松是水浒第几号人物？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 20:49:00 | INFO | webserver | 武松是《水浒传》中的第一个人物，他是一个侠客，同时也是一个武林高手。
2023-05-24 20:49:18 | INFO | webserver | add_text. ip: 127.0.0.1. len: 8
2023-05-24 20:49:18 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:49:18 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 武松是水浒第几号人物？###Assistant: 武松是《水浒传》中的第一个人物，他是一个侠客，同时也是一个武林高手。###USER: 他和林冲比如何？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 20:49:34 | INFO | webserver | 在《水浒传》中，武松和林冲是同为道长的侠客兄弟姐妹。他们在武功和智慧方面都有很高的声誉，并且在武林中有很高的地位。在故事中，他们经常一起出现，相互帮助，共同经历许多冒险和挑战。他们的关系非常良好，充满着兄弟姐妹的感情。
2023-05-24 20:51:59 | INFO | webserver | add_text. ip: 127.0.0.1. len: 14
2023-05-24 20:51:59 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:51:59 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 武松是水浒第几号人物？###Assistant: 武松是《水浒传》中的第一个人物，他是一个侠客，同时也是一个武林高手。###USER: 他和林冲比如何？###Assistant: 在《水浒传》中，武松和林冲是同为道长的侠客兄弟姐妹。他们在武功和智慧方面都有很高的声誉，并且在武林中有很高的地位。在故事中，他们经常一起出现，相互帮助，共同经历许多冒险和挑战。他们的关系非常良好，充满着兄弟姐妹的感情。###USER: 历史上鲁迅和周树人关系如何？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 20:52:31 | INFO | webserver | 鲁迅和周树人是中国知名的文学家和作家，他们的作品具有重要的文化价值。关于他们之间的关系，有一些历史记录和传说。
据传，周树人曾是鲁迅的父亲的学生和门徒，他曾经在鲁迅的指导下学习文学和文化知识。周树人的写作风格和思想方向受到了鲁迅的影响，他的作品也反映了鲁迅的文学观和思想。此外，周树人还是鲁迅的朋友和同事，两人在文学和文化方面的交流和合作也有很大的帮助。
总的来说，鲁迅和周树人之间的关系是一种文化和思想交流的关系，他们通过文学和知识的传承，为中国文学和文化做出了重要的贡献。
2023-05-24 20:52:50 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 20:53:03 | INFO | webserver | add_text. ip: 127.0.0.1. len: 11
2023-05-24 20:53:03 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 20:53:03 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 20:53:03 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 20:53:03 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 20:53:03 | ERROR | stderr |     result = await self.call_function(
2023-05-24 20:53:03 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 20:53:03 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 20:53:03 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 20:53:03 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 20:53:03 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 20:53:03 | ERROR | stderr |     return await future
2023-05-24 20:53:03 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 20:53:03 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 20:53:03 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 171, in add_text
2023-05-24 20:53:03 | ERROR | stderr |     state.append_message(state.roles[0], text)
2023-05-24 20:53:03 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'append_message'
2023-05-24 20:53:13 | INFO | webserver | regenerate. ip: 127.0.0.1
2023-05-24 20:53:13 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 20:53:13 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 20:53:13 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 20:53:13 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 20:53:13 | ERROR | stderr |     result = await self.call_function(
2023-05-24 20:53:13 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 20:53:13 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 20:53:13 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 20:53:13 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 20:53:13 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 20:53:13 | ERROR | stderr |     return await future
2023-05-24 20:53:13 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 20:53:13 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 20:53:13 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 152, in regenerate
2023-05-24 20:53:13 | ERROR | stderr |     state.messages[-1][-1] = None
2023-05-24 20:53:13 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'messages'
2023-05-24 20:53:15 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 20:53:26 | INFO | webserver | add_text. ip: 127.0.0.1. len: 6
2023-05-24 20:53:26 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 20:53:26 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 20:53:26 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 20:53:26 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 20:53:26 | ERROR | stderr |     result = await self.call_function(
2023-05-24 20:53:26 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 20:53:26 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 20:53:26 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 20:53:26 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 20:53:26 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 20:53:26 | ERROR | stderr |     return await future
2023-05-24 20:53:26 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 20:53:26 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 20:53:26 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 171, in add_text
2023-05-24 20:53:26 | ERROR | stderr |     state.append_message(state.roles[0], text)
2023-05-24 20:53:26 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'append_message'
2023-05-24 20:53:34 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:53:40 | INFO | webserver | add_text. ip: 127.0.0.1. len: 6
2023-05-24 20:53:40 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:53:40 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 鲁迅和周树人###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 20:54:20 | INFO | webserver | 鲁迅和周树人是两位著名的哲学家，代表了两个不同的哲学流派。

鲁迅是19世纪法国哲学家，被认为是现代主义哲学的创始人之一。他主张强调个人主义和自由意志，认为哲学应该离从神秘主义和传统哲学，采用科学方法来研究社会和人类的本质。他的思想对现代西方文化产生了深远的影响。

周树人是中国哲学家，他主张强调道德和政治哲学，并提出了“道德自由”和“政治自由”的概念。他认为人类应该有自己的道德准则和价值观，政治人应该尊重人民的自由和权利。周树人的思想对中国和世界的政治和文化产生了重要影响。

两人的哲学都有其独特之处，但都主张强调个人自由和人类权利。鲁迅强调的个人主义和自由意志，周树人强调的道德和政治自由，都是当代哲学和社会思想中重要的话题。
2023-05-24 20:57:04 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-24 20:58:53 | INFO | webserver | add_text. ip: 127.0.0.1. len: 9
2023-05-24 20:58:53 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 20:58:53 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-24 20:58:53 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-24 20:58:53 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-24 20:58:53 | ERROR | stderr |     result = await self.call_function(
2023-05-24 20:58:53 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-24 20:58:53 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-24 20:58:53 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-24 20:58:53 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-24 20:58:53 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-24 20:58:53 | ERROR | stderr |     return await future
2023-05-24 20:58:53 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-24 20:58:53 | ERROR | stderr |     result = context.run(func, *args)
2023-05-24 20:58:53 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 171, in add_text
2023-05-24 20:58:53 | ERROR | stderr |     state.append_message(state.roles[0], text)
2023-05-24 20:58:53 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'append_message'
2023-05-24 20:58:59 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-24 20:59:09 | INFO | webserver | add_text. ip: 127.0.0.1. len: 9
2023-05-24 20:59:09 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:59:09 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 中国的首都是哪里？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 20:59:10 | INFO | webserver | 中国的首都是北京。
2023-05-24 20:59:21 | INFO | webserver | add_text. ip: 127.0.0.1. len: 7
2023-05-24 20:59:21 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:59:21 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 中国的首都是哪里？###Assistant: 中国的首都是北京。###USER: 南宋的首都呢？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 20:59:22 | INFO | webserver | 南宋的首都是广州。
2023-05-24 20:59:34 | INFO | webserver | add_text. ip: 127.0.0.1. len: 6
2023-05-24 20:59:34 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:59:34 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 中国的首都是哪里？###Assistant: 中国的首都是北京。###USER: 南宋的首都呢？###Assistant: 南宋的首都是广州。###USER: 应该是杭州吧###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 20:59:39 | INFO | webserver | 非常抱歉，我的回答有误。南宋的首都是 indeed 杭州，而非广州。感谢您的指正。
2023-05-24 20:59:54 | INFO | webserver | add_text. ip: 127.0.0.1. len: 7
2023-05-24 20:59:54 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-24 20:59:54 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 中国的首都是哪里？###Assistant: 中国的首都是北京。###USER: 南宋的首都呢？###Assistant: 南宋的首都是广州。###USER: 应该是杭州吧###Assistant: 非常抱歉，我的回答有误。南宋的首都是 indeed 杭州，而非广州。感谢您的指正。###USER: 杭州有哪些景点###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-24 21:00:38 | INFO | webserver | 杭州是一个充满历史和文化底蕴的城市，有许多值得一看的景点，包括：
1. 西湖：杭州的标志性景点，以其美丽的湖泊和独特的建筑风格闻名。
2. 浙江医院：建于明朝，是中国最早的医院之一，以其独特的园林风格和古色古香的建筑而著名。
3. 灵隐寺：建于东晋咸和年间，是中国最早的佛教寺庙之一，以其古老的建筑和许多古代文物而著名。
4. 杭州曲院风：杭州的另一个标志性景点，以其古代的曲院和湖泊而闻名。
5. 龙门古镇：杭州的另一个古镇，以其古色古香的建筑和赏花秀丽的水乡而著名。
6. 千岛湖：杭州周边的另一个湖泊，以其美丽的水乡和许多小岛的风景而著名。
这些景点只是杭州的一部分，当地还有许多其他值得一游的景点和有趣的地方，包括博物馆、画廊、古迹、历史遗址等等。
2023-05-24 21:05:46 | ERROR | stderr | [31mERROR[0m:    Exception in ASGI application
2023-05-24 21:05:46 | ERROR | stderr | Traceback (most recent call last):
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/uvicorn/protocols/websockets/websockets_impl.py", line 254, in run_asgi
2023-05-24 21:05:46 | ERROR | stderr |     result = await self.app(self.scope, self.asgi_receive, self.asgi_send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/uvicorn/middleware/proxy_headers.py", line 78, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     return await self.app(scope, receive, send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/fastapi/applications.py", line 276, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     await super().__call__(scope, receive, send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/applications.py", line 122, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     await self.middleware_stack(scope, receive, send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/middleware/errors.py", line 149, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     await self.app(scope, receive, send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/middleware/cors.py", line 75, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     await self.app(scope, receive, send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/middleware/exceptions.py", line 79, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     raise exc
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/middleware/exceptions.py", line 68, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     await self.app(scope, receive, sender)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/fastapi/middleware/asyncexitstack.py", line 21, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     raise e
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/fastapi/middleware/asyncexitstack.py", line 18, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     await self.app(scope, receive, send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/routing.py", line 718, in __call__
2023-05-24 21:05:46 | ERROR | stderr |     await route.handle(scope, receive, send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/routing.py", line 341, in handle
2023-05-24 21:05:46 | ERROR | stderr |     await self.app(scope, receive, send)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/routing.py", line 82, in app
2023-05-24 21:05:46 | ERROR | stderr |     await func(session)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/fastapi/routing.py", line 289, in app
2023-05-24 21:05:46 | ERROR | stderr |     await dependant.call(**values)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 502, in join_queue
2023-05-24 21:05:46 | ERROR | stderr |     session_info = await asyncio.wait_for(
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/asyncio/tasks.py", line 445, in wait_for
2023-05-24 21:05:46 | ERROR | stderr |     return fut.result()
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/websockets.py", line 133, in receive_json
2023-05-24 21:05:46 | ERROR | stderr |     self._raise_on_disconnect(message)
2023-05-24 21:05:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/starlette/websockets.py", line 105, in _raise_on_disconnect
2023-05-24 21:05:46 | ERROR | stderr |     raise WebSocketDisconnect(message["code"])
2023-05-24 21:05:46 | ERROR | stderr | starlette.websockets.WebSocketDisconnect: 1001
2023-05-24 21:05:46 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-25 00:07:55 | INFO | webserver | add_text. ip: 127.0.0.1. len: 4
2023-05-25 00:07:55 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-25 00:07:55 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 岳飞是谁###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-25 00:08:19 | INFO | webserver | 岳飞是中国知名的作家和历史学家，被誉为“中国近代史的瑰宝”。他于1862年出生在安徽省淮南县，是明朝末年和清朝初年的重要人物。他以其在文学、史学和政治领域的贡献而闻名。他的著作包括《岳飞选集》、《明代秦皇运动史》等，这些著作对中国近代史的研究和理解做出了重要贡献。此外，他还是中国民主革命的先驱之一，为民主运动做出了巨大贡献。他的生平事迹和思想影响了后来的各个代表人物和文化。
2023-05-25 00:49:47 | ERROR | stderr | Traceback (most recent call last):
2023-05-25 00:49:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-25 00:49:47 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-25 00:49:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-25 00:49:47 | ERROR | stderr |     result = await self.call_function(
2023-05-25 00:49:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-25 00:49:47 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-25 00:49:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-25 00:49:47 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-25 00:49:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-25 00:49:47 | ERROR | stderr |     return await future
2023-05-25 00:49:47 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-25 00:49:47 | ERROR | stderr |     result = context.run(func, *args)
2023-05-25 00:49:47 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 621, in knowledge_embedding_store
2023-05-25 00:49:47 | ERROR | stderr |     for file in files:
2023-05-25 00:49:47 | ERROR | stderr | TypeError: 'NoneType' object is not iterable
2023-05-25 00:50:18 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-25 00:50:22 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-25 00:50:56 | ERROR | stderr | Traceback (most recent call last):
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-25 00:50:56 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-25 00:50:56 | ERROR | stderr |     result = await self.call_function(
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-25 00:50:56 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-25 00:50:56 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-25 00:50:56 | ERROR | stderr |     return await future
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-25 00:50:56 | ERROR | stderr |     result = context.run(func, *args)
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 624, in knowledge_embedding_store
2023-05-25 00:50:56 | ERROR | stderr |     knowledge_embedding_client = KnowledgeEmbedding(
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/source_embedding/knowledge_embedding.py", line 26, in __init__
2023-05-25 00:50:56 | ERROR | stderr |     self.embeddings = HuggingFaceEmbeddings(model_name=self.model_name)
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/langchain/embeddings/huggingface.py", line 39, in __init__
2023-05-25 00:50:56 | ERROR | stderr |     self.client = sentence_transformers.SentenceTransformer(self.model_name)
2023-05-25 00:50:56 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/sentence_transformers/SentenceTransformer.py", line 77, in __init__
2023-05-25 00:50:56 | ERROR | stderr |     raise ValueError("Path {} not found".format(model_name_or_path))
2023-05-25 00:50:56 | ERROR | stderr | ValueError: Path /home/charles/DB-GPT/models/text2vec-large-chinese not found
2023-05-25 00:52:06 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-25 00:57:46 | INFO | webserver | add_text. ip: 127.0.0.1. len: 6
2023-05-25 00:57:46 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-25 00:57:46 | ERROR | stderr | Traceback (most recent call last):
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-25 00:57:46 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-25 00:57:46 | ERROR | stderr |     result = await self.call_function(
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 898, in call_function
2023-05-25 00:57:46 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-25 00:57:46 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-25 00:57:46 | ERROR | stderr |     return await future
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-25 00:57:46 | ERROR | stderr |     result = context.run(func, *args)
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/utils.py", line 549, in async_iteration
2023-05-25 00:57:46 | ERROR | stderr |     return next(iterator)
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 263, in http_bot
2023-05-25 00:57:46 | ERROR | stderr |     knqa = KnownLedgeBaseQA()
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/vectordb_qa.py", line 13, in __init__
2023-05-25 00:57:46 | ERROR | stderr |     k2v = KnownLedge2Vector()
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/vector_store/file_loader.py", line 39, in __init__
2023-05-25 00:57:46 | ERROR | stderr |     self.embeddings = HuggingFaceEmbeddings(model_name=self.model_name)
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/langchain/embeddings/huggingface.py", line 39, in __init__
2023-05-25 00:57:46 | ERROR | stderr |     self.client = sentence_transformers.SentenceTransformer(self.model_name)
2023-05-25 00:57:46 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/sentence_transformers/SentenceTransformer.py", line 77, in __init__
2023-05-25 00:57:46 | ERROR | stderr |     raise ValueError("Path {} not found".format(model_name_or_path))
2023-05-25 00:57:46 | ERROR | stderr | ValueError: Path /home/charles/DB-GPT/models/all-MiniLM-L6-v2 not found
2023-05-25 00:57:59 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-25 00:58:08 | INFO | webserver | add_text. ip: 127.0.0.1. len: 6
2023-05-25 00:58:08 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-25 00:58:08 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你能帮我吗？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-25 00:58:14 | INFO | webserver | 当然可以，我是一个语言模型，可以回答您的问题和提供帮助。请问有什么我可以帮助您的？
2023-05-25 00:58:53 | INFO | webserver | add_text. ip: 127.0.0.1. len: 8
2023-05-25 00:58:53 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-25 00:58:53 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你能帮我吗？###Assistant: 当然可以，我是一个语言模型，可以回答您的问题和提供帮助。请问有什么我可以帮助您的？###USER: 你能检索文件么？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-25 00:59:03 | INFO | webserver | 作为一个语言模型，我无法直接操作或检索文件。但是，如果您需要帮助来查找文件或文件夹，我可以提供一些搜索和查找文件的方法和工具，以帮助您更好地发现和管理您的文件。
2023-05-25 01:18:40 | INFO | stdout | Keyboard interruption in main thread... closing server.
2023-05-25 01:35:01 | INFO | webserver | args: Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-25 01:35:01 | INFO | stdout | /home/charles/DB-GPT
2023-05-25 01:35:01 | INFO | stdout |  [0m Allowlisted Plugins: []
2023-05-25 01:35:01 | DEBUG | LOGGER | Allowlisted Plugins: []
2023-05-25 01:35:01 | INFO | stdout |  [0m Denylisted Plugins: []
2023-05-25 01:35:01 | DEBUG | LOGGER | Denylisted Plugins: []
2023-05-25 01:35:01 | INFO | webserver | Namespace(host='0.0.0.0', port=None, concurrency_count=10, model_list_mode='once', share=False)
2023-05-25 01:35:03 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'allow_flagged_uploads': True}
2023-05-25 01:35:03 | ERROR | stderr |   warnings.warn(
2023-05-25 01:35:03 | ERROR | stderr | /home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/deprecation.py:43: UserWarning: You have unused kwarg parameters in File, please remove them: {'accept_multiple_files': True}
2023-05-25 01:35:03 | ERROR | stderr |   warnings.warn(
2023-05-25 01:35:03 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2023-05-25 01:35:03 | INFO | stdout | 
2023-05-25 01:35:03 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2023-05-25 01:36:01 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
2023-05-25 01:36:08 | INFO | webserver | add_text. ip: 127.0.0.1. len: 2
2023-05-25 01:36:08 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-25 01:36:08 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-25 01:36:11 | INFO | webserver | 你好，有什么我能帮助你的吗？
2023-05-25 01:36:16 | INFO | webserver | add_text. ip: 127.0.0.1. len: 3
2023-05-25 01:36:16 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-25 01:36:16 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好，有什么我能帮助你的吗？###USER: 你是谁###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-25 01:36:25 | INFO | webserver | 我是 Assistant，一个基于机器学习技术的语言模型，可以回答各种问题，包括自然语言处理、数据库、编程、科学等多个领域。如果你有任何问题，我会尽我所能帮助你。
2023-05-25 01:36:37 | INFO | webserver | add_text. ip: 127.0.0.1. len: 10
2023-05-25 01:36:38 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-25 01:36:38 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好，有什么我能帮助你的吗？###USER: 你是谁###Assistant: 我是 Assistant，一个基于机器学习技术的语言模型，可以回答各种问题，包括自然语言处理、数据库、编程、科学等多个领域。如果你有任何问题，我会尽我所能帮助你。###USER: 你知道mysql吗？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-25 01:36:50 | INFO | webserver | 是的，我知道MySQL。MySQL是一种开源的关系型数据库管理系统，它是一种广泛使用的数据库，具有高效、易用、可靠等特点。MySQL支持SQL语言，可以用于存储、查询、更新和删除数据。它还提供了许多用于处理数据的功能，例如表空间、视图、索引、事务等。
2023-05-25 01:40:28 | INFO | webserver | add_text. ip: 127.0.0.1. len: 14
2023-05-25 01:40:28 | INFO | stdout | 是否是AUTO-GPT模式. False
2023-05-25 01:40:28 | INFO | webserver | Requert: 
{'model': 'vicuna-13b', 'prompt': "A chat between a curious user and an artificial intelligence assistant, who very familiar with database related knowledge. The assistant gives helpful, detailed, professional and polite answers to the user's questions. ###USER: What are the key differences between mysql and postgres?###Assistant: MySQL and PostgreSQL are both popular open-source relational database management systems (RDBMS) that have many similarities but also some differences. Here are some key differences: \n1. Data Types: PostgreSQL has a more extensive set of data types, including support for array, hstore, JSON, and XML, whereas MySQL has a more limited set.\n2. ACID compliance: Both MySQL and PostgreSQL support ACID compliance (Atomicity, Consistency, Isolation, Durability), but PostgreSQL is generally considered to be more strict in enforcing it.\n3. Replication: MySQL has a built-in replication feature, which allows you to replicate data across multiple servers,whereas PostgreSQL has a similar feature, but it is not as mature as MySQL's.\n4. Performance: MySQL is generally considered to be faster and more efficient in handling large datasets, whereas PostgreSQL is known for its robustness and reliability.\n5. Licensing: MySQL is licensed under the GPL (General Public License), which means that it is free and open-source software, whereas PostgreSQL is licensed under the PostgreSQL License, which is also free and open-source but with different terms.\nUltimately, the choice between MySQL and PostgreSQL depends on the specific needs and requirements of your application. Both are excellent database management systems, and choosing the right one for your project requires careful consideration of your application's requirements, performance needs, and scalability.###USER: 你好###Assistant: 你好，有什么我能帮助你的吗？###USER: 你是谁###Assistant: 我是 Assistant，一个基于机器学习技术的语言模型，可以回答各种问题，包括自然语言处理、数据库、编程、科学等多个领域。如果你有任何问题，我会尽我所能帮助你。###USER: 你知道mysql吗？###Assistant: 是的，我知道MySQL。MySQL是一种开源的关系型数据库管理系统，它是一种广泛使用的数据库，具有高效、易用、可靠等特点。MySQL支持SQL语言，可以用于存储、查询、更新和删除数据。它还提供了许多用于处理数据的功能，例如表空间、视图、索引、事务等。###USER: mysql的竞争对手有哪些？###Assistant:", 'temperature': 0.7, 'max_new_tokens': 1024, 'stop': '###'}
2023-05-25 01:40:49 | INFO | webserver | MySQL的竞争对手包括其他开源数据库和商业数据库。其中一些开源数据库包括PostgreSQL、MongoDB、Ingres等；而商业数据库则包括Oracle、Microsoft SQL Server、IBM DB2等。每种数据库都有自己的优势和劣势，选择合适的数据库取决于应用程序的具体需求和要求。注意，MySQL并不是所有数据库的竞争对手，但它是一种广泛使用和受欢迎的开源数据库，在应用程序中拥有很高的使用率。
2023-05-25 01:44:40 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-25 01:44:50 | INFO | webserver | add_text. ip: 127.0.0.1. len: 7
2023-05-25 01:44:50 | ERROR | stderr | Traceback (most recent call last):
2023-05-25 01:44:50 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/routes.py", line 394, in run_predict
2023-05-25 01:44:50 | ERROR | stderr |     output = await app.get_blocks().process_api(
2023-05-25 01:44:50 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 1075, in process_api
2023-05-25 01:44:50 | ERROR | stderr |     result = await self.call_function(
2023-05-25 01:44:50 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/gradio/blocks.py", line 884, in call_function
2023-05-25 01:44:50 | ERROR | stderr |     prediction = await anyio.to_thread.run_sync(
2023-05-25 01:44:50 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/to_thread.py", line 31, in run_sync
2023-05-25 01:44:50 | ERROR | stderr |     return await get_asynclib().run_sync_in_worker_thread(
2023-05-25 01:44:50 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 937, in run_sync_in_worker_thread
2023-05-25 01:44:50 | ERROR | stderr |     return await future
2023-05-25 01:44:50 | ERROR | stderr |   File "/home/charles/miniconda3/envs/db_gpt/lib/python3.10/site-packages/anyio/_backends/_asyncio.py", line 867, in run
2023-05-25 01:44:50 | ERROR | stderr |     result = context.run(func, *args)
2023-05-25 01:44:50 | ERROR | stderr |   File "/home/charles/DB-GPT/pilot/server/webserver.py", line 171, in add_text
2023-05-25 01:44:50 | ERROR | stderr |     state.append_message(state.roles[0], text)
2023-05-25 01:44:50 | ERROR | stderr | AttributeError: 'NoneType' object has no attribute 'append_message'
2023-05-25 01:44:54 | INFO | webserver | clear_history. ip: 127.0.0.1
2023-05-25 01:44:56 | INFO | webserver | load_demo. ip: 127.0.0.1. params: {'__theme': 'dark'}
